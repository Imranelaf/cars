|-./
  |-App.tsx
    import Home from "./pages/Home";
    
    export default function App(){
    
      return(
        <Home />
      )
    }
  |-main.tsx
    import { StrictMode } from 'react'
    import { createRoot } from 'react-dom/client'
    import './index.css'
    import App from './App.tsx'
    
    createRoot(document.getElementById('root')!).render(
      <StrictMode>
        <App />
      </StrictMode>,
    )
  |-pages/
    |-Home.tsx
      import { useGSAP } from "@gsap/react";
      import gsap from "gsap";
      import { ScrollTrigger } from "gsap/ScrollTrigger";
      import Slogan from "../components/Home_helper/Slogan";
      import VideosCards from "../components/Home_helper/VideosCards";
      
      export default function Home() {
        gsap.registerPlugin(ScrollTrigger, useGSAP);
      
        useGSAP(() => {
          const videosNum = gsap.utils.toArray(".videos");
      
          // Only handle VideosCards vertical animation
          const tl2 = gsap.timeline({
            scrollTrigger: {
              trigger: ".videoContainer",
              scrub: 1,
              start: "top top",
              end: `+=${window.innerHeight * (videosNum.length - 1)}`,
              pin: true, // keep the section fixed during animation
              markers: true,
            },
          });
      
          tl2.to(videosNum, {
            yPercent: -90 * (videosNum.length - 1),
            ease: "none",
            onStart: () => console.log("Vertical scroll started!"),
          });
        }, []);
      
        return (
          <div className="relative bgColor h-screen HomeContainer flex">
            <div className="comp">
              <Slogan />
            </div>
      
            
            <div className="comp">
              <VideosCards />
            </div>
          </div>
        );
      }
  |-components/
    |-NavBar.tsx
      import { useState } from 'react';
      
      export default function NavBar() {
        const bar = ['WORK', 'NEWS', 'ABOUT', 'CONTACT'];
        const [isOpen, setIsOpen] = useState(false);
      
        return (
          <nav className="flex border-2 border-[#eae7d4] rounded-sm p-4 justify-between items-center text-[#eae7d4] relative">
            <p className="text-lg sm:text-xl font-bold">Cars</p>
            
            {/* Desktop Menu */}
            <ul className="hidden lg:flex gap-6 xl:gap-12 mr-8 font-black text-lg xl:text-xl">
              {bar.map(word => (
                <li key={word} className="cursor-pointer group flex">
                  {word.split('').map((letter, index) => (
                    <span
                      key={index}
                      className="inline-block squizingLetter"
                      style={{ animationDelay: `${index * 0.1}s` }}
                    >
                      {letter}
                    </span>
                  ))}
                </li>
              ))}
            </ul>
      
            {/* Hamburger Button */}
            <button 
              className="lg:hidden flex flex-col gap-1.5 z-50"
              onClick={() => setIsOpen(!isOpen)}
              aria-label="Toggle menu"
            >
              <span 
                className={`w-7 h-0.5 bg-[#eae7d4] transition-all duration-300 ${
                  isOpen ? 'rotate-45 translate-y-2' : ''
                }`}
              />
              <span 
                className={`w-7 h-0.5 bg-[#eae7d4] transition-all duration-300 ${
                  isOpen ? 'opacity-0' : ''
                }`}
              />
              <span 
                className={`w-7 h-0.5 bg-[#eae7d4] transition-all duration-300 ${
                  isOpen ? '-rotate-45 -translate-y-2' : ''
                }`}
              />
            </button>
      
            {/* Mobile Menu */}
            <div 
              className={`lg:hidden fixed top-0 right-0 h-screen w-full sm:w-80 bg-[#2a3037] border-l-2 border-[#eae7d4] transition-transform duration-300 ease-in-out z-40 ${
                isOpen ? 'translate-x-0' : 'translate-x-full'
              }`}
            >
              <ul className="flex flex-col gap-8 mt-24 px-8 font-black text-2xl">
                {bar.map(word => (
                  <li 
                    key={word} 
                    className="cursor-pointer group flex border-b-2 border-[#eae7d4]/30 pb-4"
                    onClick={() => setIsOpen(false)}
                  >
                    {word.split('').map((letter, index) => (
                      <span
                        key={index}
                        className="inline-block squizingLetter"
                        style={{ animationDelay: `${index * 0.1}s` }}
                      >
                        {letter}
                      </span>
                    ))}
                  </li>
                ))}
              </ul>
            </div>
      
            {/* Overlay */}
            {isOpen && (
              <div 
                className="lg:hidden fixed inset-0 bg-black/50 z-30"
                onClick={() => setIsOpen(false)}
              />
            )}
          </nav>
        );
      }
    |-Home_helper/
      |-Informations.tsx
        
        
        export default function Infos(){
            return(
                <div className="w-full h-screen flex flex-col justify-center items-center">
                    <img src="./images/curved-text.webp" alt="PIXAR CURVED TEXT"
                    className="w-60 lg:w-auto imageRotation"
                     
                    />
                    <h6 className="lg:m-4 m-2 text-center lg:text-3xl">
                        A rookie race car, <span className="font-extrabold lg:text-4xl">Lightning McQueen</span>, gets stranded in the forgotten town of <span className="lg:text-6xl italic">Radiator Springs</span>  on Route
                         66. Forced to repair the main road, he learns about <span className="underline italic font-extrabold lg:text-5xl">friendship, humility</span>, and the importance 
                         of <span className="text-2xl lg:text-5xl italic">community</span>  from the quirky locals, realizing that slowing down to appreciate life is more 
                         rewarding than fame.</h6>
                </div>
            )
        }
      |-Slogan.tsx
        import '../../App.css'
        
        export default function Slogan() {
        
            return (
                <section className="h-screen w-[80vw] luckiest-guy-bold text-4xl md:text-6xl lg:text-8xl text-[#eae7d4]">
                    <div className="h-full flex flex-col lg:flex-row lg:justify-between">
                        {/* Main content */}
                        <div className="flex-1 flex items-center justify-center">
                            {/* Large screens */}
                            <div className="hidden lg:flex flex-col items-center">
                                <h1>Life's Journey</h1>
                                <h1 className='text-9xl text-red-500 italic'>Enjoy</h1>
                                <div className='flex gap-3 items-center mt-4'>
                                    <h1>The</h1>
                                    <img
                                        src="./images/mcqueen.gif"
                                        alt="Winking"
                                        className="w-70"
                                    />
                                    <h1>Ride</h1>
                                </div>
                            </div>
        
                            {/* Small screens */}
                            <div className="lg:hidden text-[#eae7d4] flex flex-col items-center w-full px-4">
                                <h1>Life's Journey</h1>
                                <h1 className='text-5xl !text-red-500 italic'>Enjoy</h1>
                                <h1>The ride</h1>
                                <img
                                    src="./images/mcqueen.gif"
                                    alt="Winking"
                                    className="w-50"
                                />
                                <div className='w-full text-base overflow-hidden my-4 p-1 border-2 rounded-sm'>
                                    <div className="flex gap-4 animate-scroll">
                                        {Array.from({ length: 8}).map((_, index) => (
                                            <p key={index} className="text-[#eae7d4] tracking-wider font-semibold whitespace-nowrap">PIXAR</p>
                                        ))}
                                    </div>
                                </div>
                            </div>
                        </div>
        
                        {/* Scrolling bar for large screens */}
                        <div className='hidden lg:block border-2 border-[#eae7d4] overflow-hidden w-14 my-4 h-10/12 rounded-sm'>
                            <div className="flex flex-col gap-9 items-center animate-scroll-vertical">
                                {Array.from({ length: 16 }).map((_, index) => (
                                    <p key={index} className="text-[#eae7d4] text-base tracking-wider font-semibold whitespace-nowrap rotate-180" style={{writingMode: 'vertical-rl'}}>PIXAR</p>
                                ))}
                            </div>
                        </div>
                    </div>
                </section>
            )
        }
      |-ImagesPosters.tsx
        import { useGSAP } from "@gsap/react";
        import gsap from "gsap"
        import { ScrollTrigger } from "gsap/ScrollTrigger"
        
        const data = [
                {
                    name: 'Lightning mcQueen',
                    image: 'McQueen.webp'
                },
                {
                    name: 'Cruz Ramirez',
                    image: 'Cruz_Ramirez.webp'
                },
                {
                    name: 'Doc Hudson',
                    image: 'Doc_Hudson.webp'
                },
                {
                    name: 'Jackson Storm',
                    image: 'Jackson_Storm.webp'
                },
                {
                    name: 'Martin',
                    image: 'Martin.webp'
                },
                {
                    name: 'Sally Carrera',
                    image: 'Sally_Carrera.webp'
                },
            ]
        
        export default function Images() {
            
            useGSAP(()=>{
        
                gsap.registerPlugin(ScrollTrigger);
        
                const sections = gsap.utils.toArray('.panel');
        
                gsap.to(sections,{
                    xPercent: -86 * (sections.length - 2),
                    scrollTrigger:{
                        trigger: '.imagesContainer',
                        start:'center center',
                       
                        scrub:2,
                        markers:true
                        
                    },
                });
        
            })
        
            
            
         
            
            return (
                <div className=" imagesContainer h-screen bg-green-500  font-extrabold ">
                    <h6 className="lg:text-8xl text-6xl mx-8">Characters</h6>
                    <h6 className="lg:text-9xl text-6xl mx-4 !text-red-500 ">Posters</h6>
                    <div className="overflow-x-hidden ">
                    <div className="h-auto w-fit p-4 lg:flex lg:gap-8 images">
        
                        {
                            data.map((item) => (
                                <div key={item.name} className="w-full mt-3 panel ">
                                <img 
                                loading="lazy"        
                                src={`./images/Posters/${item.image}`}
                                alt={`${item.name}`}
                                className="rounded-xl lg:min-w-120 h-110 hover:border-4 cursor-pointer hover:border-red-500 duration-200"
                                />
                                        <h6 className="text-center text-2xl border-2 border-red-500 rounded-xl mt-1">{item.name}</h6>
                                        </div>
                                ))
                        }
        
        
        
                    </div>
                    </div>
        
                </div>
            )
        }
      |-VideosCards.tsx
        import { useRef } from "react"
        import { useGSAP } from "@gsap/react"
        import gsap from "gsap"
        import { ScrollTrigger } from "gsap/ScrollTrigger"
        import Infos from "./Informations"
        
        const data = [
            {
                src: '1.mp4',
                title: 'Starting',
                para: "Let's go"
            },
            {
                src: '2.mp4',
                title: 'Racing',
                para: "Lightning"
            },
            {
                src: '3.mp4',
                title: 'Troubles',
                para: "Accident"
            },
            {
                src: '4.mp4',
                title: 'finish line',
                para: "Is he win?"
            },
        ]
        
        export default function VideosCards() {
        
            const videoRef = useRef([])
           
        
            const playVideo = (index)=>{
                videoRef.current && videoRef.current[index].play()
            }
        
            const pausedVideo = (index)=>{
                if(videoRef.current){ 
                    videoRef.current[index].pause()
                    videoRef.current[index].currentTime = 0 
                }}
        
        
           return(
                <section className="w-[90vw] h-screen lg:flex bg-yellow-500 videoContainer">
                    <div className="relative lg:w-1/2 w-full h-full videoTrigger flex flex-col gap-5 overflow-hidden">
        
                   {
                    data.map((item,index)=>(
        
                        <div key={item.src}
                        className="w-full h-full videos rounded-sm bg-[#eae7d4] text-red-500 p-1 lg:p-4 text-center cursor-pointer hover:bg-red-500 hover:text-[#eae7d4] duration-500 flex flex-col justify-center items-center"
                        onMouseEnter={()=>playVideo(index)}
                        onMouseLeave={()=>pausedVideo(index)}
                        >
                            <video src={`./videos/${item.src}`}
                            className="h-auto w-full rounded-sm max-h-[60vh]"
                            ref={(el) => videoRef.current[index] = el}
                            muted
                            playsInline
                            />
                            <h1 className="lg:text-2xl font-semibold !text-black mt-4">{item.title}</h1>
                            <h2 className="lg:text-5xl text-2xl font-extrabold ">{item.para}</h2>
        
        
        
                        </div>
                    ))
                   }
        
        
                   
                </div>
                <div className="lg:w-1/2 lg:p-5 p-1 mt-5">
                   <Infos />
                   </div>
                </section>
        
           )
        }
